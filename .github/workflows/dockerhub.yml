name: Publish Docker Image (Reusable)

on:
  workflow_call:
    inputs:
      image-name:
        description: 'Nombre de la imagen (sin usuario)'
        required: true
        type: string
      working-directory:
        description: 'Directorio donde est치 el Dockerfile'
        required: false
        default: '.'
        type: string
      check-dist:
        description: 'Fallar si no existe dist/bipal-front/browser/index.html'
        required: false
        default: true
        type: boolean
      extra-tags:
        description: 'Lista separada por comas de tags adicionales'
        required: false
        default: ''
        type: string
      download-artifact-name:
        description: 'Si se especifica, se intentar치 descargar este artifact en dist/bipal-front/browser'
        required: false
        default: ''
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
    outputs:
      version:
        description: 'Versi칩n obtenida de package.json'
        value: ${{ jobs.publish.outputs.version }}

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.pkg.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Descargar artifact dist
        if: inputs.download-artifact-name != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download-artifact-name }}
          path: dist/bipal-front/browser

      - name: Verificar dist (opcional)
        if: inputs.check-dist == true
        run: |
          if [ ! -f dist/bipal-front/browser/index.html ]; then
            echo 'ERROR: No se encontr칩 dist/bipal-front/browser/index.html. Debes compilar antes y/o descargar artifact.' >&2
            exit 1
          fi

      - name: Extraer version
        id: pkg
        run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Preparar tags
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::12}
          VERSION=${{ steps.pkg.outputs.version }}
          TAGS="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image-name }}:latest\n${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image-name }}:${SHA_TAG}\n${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image-name }}:${VERSION}"
          if [ -n "${{ inputs.extra-tags }}" ]; then
            IFS=',' read -ra LIST <<< "${{ inputs.extra-tags }}"; for t in "${LIST[@]}"; do TAGS="$TAGS\n${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image-name }}:${t}"; done
          fi
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image-name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image-name }}:buildcache,mode=max

      - name: Summary
        run: |
          echo "Tags publicados:" >> $GITHUB_STEP_SUMMARY
          echo -e "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
