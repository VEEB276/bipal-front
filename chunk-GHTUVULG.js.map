{
  "version": 3,
  "sources": ["src/app/modules/hojadevida/store/feature/hojavida.actions.ts", "src/app/modules/hojadevida/store/feature/hojavida.reducer.ts", "src/app/modules/hojadevida/services/informacion-personal.service.ts", "src/app/modules/hojadevida/store/persona.guard.ts"],
  "sourcesContent": ["import { createActionGroup, emptyProps, props } from '@ngrx/store';\nimport { PersonaDto } from '../../models';\n\nexport const HojavidaActions = createActionGroup({\n  source: 'Hojavida',\n  events: {\n    'Load Persona': props<{ id: number }>(),\n    'Load Persona Success': props<{ persona: PersonaDto }>(),\n    'Load Persona Failure': props<{ error: string }>(),\n    'Clear Persona': emptyProps(),\n    'Update Persona In State': props<{ persona: PersonaDto }>(),\n  }\n});\n", "import { createFeature, createReducer, createSelector, on } from \"@ngrx/store\";\nimport { HojavidaActions } from \"./hojavida.actions\";\nimport { PersonaDto } from \"../../models\";\n\nexport const HOJAVIDA_FEATURE_KEY = \"hojavida\";\n\nexport interface HojavidaState {\n  persona: PersonaDto | null;\n  loadingPersona: boolean;\n  errorPersona: string;\n}\n\nconst initialState: HojavidaState = {\n  persona: null,\n  loadingPersona: false,\n  errorPersona: null,\n};\n\nconst reducer = createReducer<HojavidaState>(\n  initialState,\n  on(HojavidaActions.loadPersona, (state) => ({\n    ...state,\n    loadingPersona: true,\n    errorPersona: null,\n  })),\n  on(HojavidaActions.loadPersonaSuccess, (state, { persona }) => ({\n    ...state,\n    persona,\n    loadingPersona: false,\n  })),\n  on(HojavidaActions.loadPersonaFailure, (state, { error }) => ({\n    ...state,\n    loadingPersona: false,\n    errorPersona: error,\n  })),\n  on(HojavidaActions.clearPersona, () => initialState),\n  on(HojavidaActions.updatePersonaInState, (state, { persona }) => ({\n    ...state,\n    persona,\n  }))\n);\n\nexport const hojavidaFeature = createFeature({\n  name: HOJAVIDA_FEATURE_KEY,\n  reducer,\n});\n\nexport const selectIdPersona = createSelector(\n  hojavidaFeature.selectHojavidaState,\n  (state) => state.persona?.id\n);\n\nexport const selectIdHojaVida = createSelector(\n  hojavidaFeature.selectHojavidaState,\n  (state) => state.persona?.idHojaVida\n);\n\nexport const {\n  name: hojavidaFeatureKey,\n  reducer: hojavidaReducer,\n  selectHojavidaState,\n  selectPersona,\n  selectLoadingPersona,\n  selectErrorPersona,\n} = hojavidaFeature;\n", "import { inject, Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { environment } from \"../../../../environments/environment\";\nimport { PersonaDto, PersonaCreateDto, PersonaUpdateDto, TipoDocumentoDto, GeneroDto, EnfoqueDiferencialDto } from \"../models\";\nimport { AuthService } from \"../../../core/auth/auth.service\";\nimport { Store } from \"@ngrx/store\";\nimport { HojavidaActions } from \"../store\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class InformacionPersonalService {\n  private readonly apiUrl = `${environment.hojaDeVidaApiUrl}/persona`;\n\n  private readonly httpOptions = {\n    headers: new HttpHeaders({\n      \"Content-Type\": \"application/json\",\n    }),\n  };\n\n  private readonly auth = inject(AuthService);\n  private readonly store = inject(Store);\n\n  constructor(private readonly http: HttpClient) {}\n\n  /**\n   * Obtiene la información personal de una persona por ID\n   * @param id ID de la persona\n   * @returns Observable con los datos de la persona\n   */\n  obtenerInformacionPersonal(id: number): Observable<PersonaDto> {\n    // Endpoint backend: GET /api/persona/find-by-id-persona/{id}\n    return this.http\n      .get<PersonaDto>(`${this.apiUrl}/find-by-id-persona/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Obtiene toda la información personal disponible\n   * @returns Observable con lista de personas\n   */\n  // TODO: Endpoint no implementado en backend (listar todas las personas)\n  obtenerTodasLasPersonas(): Observable<PersonaDto[]> {\n    return this.http\n      .get<PersonaDto[]>(this.apiUrl)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Crea una nueva persona con su información personal\n   * @param persona Datos de la persona a crear\n   * @returns Observable con la persona creada\n   */\n  crearInformacionPersonal(persona: PersonaCreateDto): Observable<PersonaDto> {\n    // Endpoint backend: POST /api/persona/create-persona\n    return this.http\n      .post<PersonaDto>(\n        `${this.apiUrl}/create-persona`,\n        persona,\n        this.httpOptions\n      )\n      .pipe(\n        tap((resp) => {\n          // aqui solo se deberia actualizar el id de la persona en la sesion getSession()\n          this.auth.updatePersonaId(resp.id).then(() => this.auth.getSession());\n          this.store.dispatch(HojavidaActions.loadPersonaSuccess({ persona: resp }));\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Actualiza la información personal de una persona existente\n   * @param persona Datos actualizados de la persona\n   * @returns Observable con la persona actualizada\n   */\n  actualizarInformacionPersonal(\n    persona: PersonaUpdateDto\n  ): Observable<PersonaDto> {\n    // Endpoint backend: PUT /api/persona/actualizar-persona (id enviado en el body)\n    return this.http\n      .put<PersonaDto>(\n        `${this.apiUrl}/actualizar-persona`,\n        persona,\n        this.httpOptions\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Elimina la información personal de una persona\n   * @param id ID de la persona a eliminar\n   * @returns Observable vacío\n   */\n  // TODO: Endpoint eliminar persona no existe aún en backend\n  eliminarInformacionPersonal(id: number): Observable<void> {\n    return this.http\n      .delete<void>(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Busca personas por numero de documento.\n   * @param numeroDocumento Número de documento para buscar\n   * @returns Observable con la persona encontrada\n   */\n  // TODO: Endpoint buscar por documento no existe aún en backend\n  buscarPorDocumento(numeroDocumento: string): Observable<PersonaDto> {\n    return this.http\n      .get<PersonaDto>(`${this.apiUrl}/find?numero-documento=${numeroDocumento}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Valida si un número de documento ya existe\n   * @param numeroDocumento Número de documento a validar\n   * @returns Observable con booleano indicando si existe\n   */\n  // TODO: Endpoint validar documento no existe aún en backend\n  validarDocumentoExistente(numeroDocumento: string): Observable<boolean> {\n    return this.http\n      .get<boolean>(`${this.apiUrl}/validar-documento/${numeroDocumento}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Valida si un correo electrónico ya existe\n   * @param correoElectronico Correo electrónico a validar\n   * @returns Observable con booleano indicando si existe\n   */\n  // TODO: Endpoint validar correo no existe aún en backend\n  validarCorreoExistente(correoElectronico: string): Observable<boolean> {\n    return this.http\n      .get<boolean>(\n        `${this.apiUrl}/validar-correo/${encodeURIComponent(correoElectronico)}`\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  // Métodos agregados según endpoints existentes en PersonaController\n\n  /**\n   * Obtiene todos los tipos de documento\n   * Endpoint backend: GET /api/persona/search-all-tipo-documento\n   */\n  obtenerTiposDocumento(): Observable<TipoDocumentoDto[]> {\n    return this.http\n      .get<TipoDocumentoDto[]>(`${this.apiUrl}/search-all-tipo-documento`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Obtiene todos los géneros\n   * Endpoint backend: GET /api/persona/search-all-sexo\n   */\n  obtenerGeneros(): Observable<GeneroDto[]> {\n    return this.http\n      .get<GeneroDto[]>(`${this.apiUrl}/search-all-sexo`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Obtiene todos los enfoques diferenciales\n   * Endpoint backend: GET /api/persona/search-all-enfoque-diferencial\n   */\n  obtenerEnfoquesDiferenciales(): Observable<EnfoqueDiferencialDto[]> {\n    return this.http\n      .get<EnfoqueDiferencialDto[]>(`${this.apiUrl}/search-all-enfoque-diferencial`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Busca departamentos y municipios opcionalmente filtrados\n   * Endpoint backend: GET /api/persona/search-all-departamento-municipio?query=...\n   * @param query texto a filtrar (opcional)\n   */\n  buscarDepartamentosMunicipios(query?: string): Observable<any[]> {\n    let params = new HttpParams();\n    if (query) {\n      params = params.set(\"query\", query);\n    }\n    return this.http\n      .get<any[]>(`${this.apiUrl}/search-all-departamento-municipio`, {\n        params,\n      })\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Maneja errores HTTP\n   * @param error Error HTTP\n   * @returns Observable con error formateado\n   */\n  private handleError(error: any): Observable<never> {\n    let errorMessage = \"Ha ocurrido un error inesperado\";\n\n    if (error.error instanceof ErrorEvent) {\n      // Error del lado del cliente\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Error del lado del servidor\n      switch (error.status) {\n        case 400:\n          errorMessage =\n            \"Datos inválidos. Por favor, revise la información ingresada.\";\n          break;\n        case 401:\n          errorMessage = \"No tiene autorización para realizar esta acción.\";\n          break;\n        case 404:\n          errorMessage = \"La información solicitada no fue encontrada.\";\n          break;\n        case 409:\n          errorMessage = \"Ya existe un registro con estos datos.\";\n          break;\n        case 500:\n          errorMessage = \"Error interno del servidor. Intente más tarde.\";\n          break;\n        default:\n          errorMessage = `Error ${error.status}: ${error.message}`;\n      }\n    }\n\n    console.error(\"Error en InformacionPersonalService:\", error);\n    return throwError(() => new Error(errorMessage));\n  }\n}\n", "import { inject } from \"@angular/core\";\nimport { CanActivateFn, createUrlTreeFromSnapshot } from \"@angular/router\";\nimport { AuthService } from \"../../../core/auth/auth.service\";\nimport { InformacionPersonalService } from \"../services\";\nimport { Store } from \"@ngrx/store\";\nimport { HojavidaActions, selectPersona } from \"./index\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { NotificationService } from \"../../../core/services\";\n\nexport const personaPrefetchGuard: CanActivateFn = () => {\n  const auth = inject(AuthService);\n  const servicio = inject(InformacionPersonalService);\n  const store = inject(Store);\n  const notify = inject(NotificationService);\n\n  const idPersona = auth.session?.user.user_metadata.idPersona;\n  if (!idPersona) return true;\n\n  // Verificar si ya está en store\n  let alreadyLoaded = false;\n  const person = store.selectSignal(selectPersona)();\n  alreadyLoaded = !!person && person.id === idPersona;\n  if (alreadyLoaded) return true;\n\n  // Dispatch de inicio\n  store.dispatch(HojavidaActions.loadPersona({ id: idPersona }));\n  return servicio.obtenerInformacionPersonal(idPersona).pipe(\n    tap({\n      next: (persona) =>\n        store.dispatch(HojavidaActions.loadPersonaSuccess({ persona })),\n      error: (err) =>\n        store.dispatch(\n          HojavidaActions.loadPersonaFailure({\n            error: err.message || \"Error cargando persona\",\n          })\n        ),\n    }),\n    catchError(() => {\n      notify.showError(\n        \"No fue posible cargar la información personal, por favor contacte al administrador.\"\n      );\n      return auth.signOut();\n    }), // En caso de error, deslogear\n    map(() => true)\n  );\n};\n"],
  "mappings": "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",
  "names": []
}
